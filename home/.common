#  ______     ______     __    __     __    __     ______     __   __
# /\  ___\   /\  __ \   /\ "-./  \   /\ "-./  \   /\  __ \   /\ "-.\ \
# \ \ \____  \ \ \/\ \  \ \ \-./\ \  \ \ \-./\ \  \ \ \/\ \  \ \ \-.  \
#  \ \_____\  \ \_____\  \ \_\ \ \_\  \ \_\ \ \_\  \ \_____\  \ \_\\"\_\
#   \/_____/   \/_____/   \/_/  \/_/   \/_/  \/_/   \/_____/   \/_/ \/_/
#  ______   __  __     __   __     ______     ______   __     ______     __   __     ______
# /\  ___\ /\ \/\ \   /\ "-.\ \   /\  ___\   /\__  _\ /\ \   /\  __ \   /\ "-.\ \   /\  ___\
# \ \  __\ \ \ \_\ \  \ \ \-.  \  \ \ \____  \/_/\ \/ \ \ \  \ \ \/\ \  \ \ \-.  \  \ \___  \
#  \ \_\    \ \_____\  \ \_\\"\_\  \ \_____\    \ \_\  \ \_\  \ \_____\  \ \_\\"\_\  \/\_____\
#   \/_/     \/_____/   \/_/ \/_/   \/_____/     \/_/   \/_/   \/_____/   \/_/ \/_/   \/_____/

# general
export EMAIL=afmalvim@gmail.com
export EDITOR="code -w"
export VISUAL="$EDITOR"

# encoding

export LANG="pt_BR.UTF-8"
export LC_ALL="pt_BR.UTF-8"
# export LANG="en_US.UTF-8"
# export LC_ALL="en_US.UTF-8"

# history
export FIGNORE=.DS_Store
export HISTFILE=$HOME/.history
export HISTSIZE=10000
export HISTFILESIZE=$HISTSIZE
export HISTIGNORE="ls:cd:exit"

##################
# Code # Color   #
##################
#  00  # Off     #
#  30  # Black   #
#  31  # Red     #
#  32  # Green   #
#  33  # Yellow  #
#  34  # Blue    #
#  35  # Magenta #
#  36  # Cyan    #
#  37  # White   #
##################

export OSX=$(test "`uname`" = "Darwin" && echo "osx")
export LINUX=$(test "`uname`" = "Linux" && echo "linux")

now=$(date +"%m_%d_%Y__%H_%M_%S")

if [ "$LINUX" = "linux" ]; then
	function print { echo -e "\033[1;32m=> $1\033[0m"; }
	function msg_checking { echo -e "\033[1;32m=> $1 ✔\033[0m"; }
	function msg_installing { echo -e "\033[1;33m==> $1 [updating] ✔\033[0m"; }
	function msg_install { echo -e "\033[1;33m==> $1 [installing]: $ $2\033[0m"; }
	function msg_ok { echo -e "\033[1;32m==> $1 installed ✔\033[0m"; }
	function msg { echo -e "\033[0;32m$1\033[0m"; }
	function msg_alert { echo -e "\033[1;31m✖ $1 ✖\033[0m"; }
fi

if [ "$OSX" = "osx" ]; then
	function msg_checking { echo "\033[1;32m=> $1 ✔\033[0m"; }
	function msg_installing { echo "\033[1;33m==> $1 [updating] ✔\033[0m"; }
	function msg_install { echo "\033[1;33m==> $1 [installing]: $ $2\033[0m"; }
	function msg_ok { echo "\033[1;32m==> $1 installed ✔\033[0m"; }
	function msg { echo "\033[0;32m$1\033[0m"; }
	function msg_alert { echo "\033[1;31m✖ $1 ✖\033[0m"; }
fi

function file_to_array() {
    array=()
    while IFS= read -r line
    do
        array+=("$line")
    done < "$1"
}

# header logging
e_header() {
    printf "\n$(tput setaf 7)%s$(tput sgr0)\n" "$@"
}

# success logging
e_success() {
    printf "$(tput setaf 64)✓ %s$(tput sgr0)\n" "$@"
}

# error logging
e_error() {
    printf "$(tput setaf 1)x %s$(tput sgr0)\n" "$@"
}

# warning logging
e_warning() {
    printf "$(tput setaf 136)! %s$(tput sgr0)\n" "$@"
}

# ask for confirmation before proceeding
seek_confirmation() {
    printf "\n"
    e_warning "$@"
    read -p "Continue? (y/n) " -n 1
    printf "\n"
}

# test whether the result of an 'ask' is a confirmation
is_confirmed() {
    if [[ "$REPLY" =~ ^[Yy]$ ]]; then
      return 0
    fi
    return 1
}

# test whether we're in a git repo
is_git_repo() {
    $(git rev-parse --is-inside-work-tree &> /dev/null)
}

# test whether a command exists
# $1 - cmd to test
type_exists() {
    if [ $(type -P $1) ]; then
      return 0
    fi
    return 1
}

# test whether a Homebrew formula is already installed
# $1 - formula name (may include options)
formula_exists() {
    if $(brew list $1 >/dev/null); then
        printf "%s already installed.\n" "$1"
        return 0
    fi

    e_warning "Missing formula: $1"
    return 1
}

restart_bluetooth() {

    # blueutil
    if which blueutil &> /dev/null; then
        msg_ok "blueutil"
    else
        msg_installing "blueutil installing..."
        brew install blueutil
        msg_ok "blueutil"
    fi

    blueutil -p 0
    msg_alert 'Bluetooth off!'
    blueutil -p 1
    msg 'Bluetooth on!'
}

# create a new directory and enter it
function mk_enter() {
    mkdir -p "$@" && cd "$@"
}

function mk_dir_date(){
    echo `date '+%Y-%m-%d'`
    mkdir `date '+%Y-%m-%d'`
}

# kill process based on a file with its pid.
function kill_by_pid {
    if [ -z "$1" ]; then
        echo "type pid path."
    else
        kill $(cat $1)
    fi
}

# kill a group of pids based on a query.
function kill_group {
    if [ -z "$1" ]; then
        echo "type the query."
    else
        ps auxww | grep $1 | awk '{print $2}' | xargs kill -9
    fi
}

function new_ssh_key() {
    ssh-keygen -t rsa -b 4096 -C $EMAIL
}

function nrmod {
    stat -f '%A'
}

whatsmyip() {
    ip=$(curl -s https://api.ipify.org)
    echo "My public IP address is: $ip"
}

gpip() {
    PIP_REQUIRE_VIRTUALENV="" pip "$@"
}

gpg_encrypt() {
    recipient=$1
    echo -n "Type Secret: "
    read secret

    echo -n "${secret}" | gpg --encrypt --armor --trust-model always -r $recipient | pbcopy
    echo "Done. Copied to buffer."
}

gpg_search() {
    gpg --keyserver pgp.mit.edu  --search-keys $1
}

function git_backup(){
    git clone $1
    cd `basename ${1} .git`
    git_fetch_all_branches
    echo "=========== BRANCHES"
    git branch -a
    echo "===================="
    cd ..
}

function git_fetch_all_branches(){
    git branch -r | grep -v '\->' | while read remote; do git branch --track "${remote#origin/}" "$remote"; done
    git fetch --all
    git pull --all
}

function weather_compare(){
    diff -Naur <(curl -s http://wttr.in/$1 ) <(curl -s http://wttr.in/$2 )
}

function weather(){
    local city="${1:-Recife}"
    curl -s "http://wttr.in/${city}"
}

function install_theme(){
    export ZSH_CUSTOM_THEMES=$ZSH/custom/themes
    [[ ! -f $ZSH_CUSTOM_THEMES/alvim.zsh-theme ]] && cp $DOTFILES_DIR/theme/alvim.zsh-theme $ZSH_CUSTOM_THEMES/alvim.zsh-theme
    sed -i '' -e 's|^ZSH_THEME=.*$|ZSH_THEME="alvim"|g' $DOTFILES_DIR/home/.zshrc && source ~/.zshrc && echo "Edited line in ~/zshrc :" && cat ~/.zshrc | grep -m 1 ZSH_THEME
    echo "Theme installed. Reload your SHELL."
}

arthur() {
    msg ' ______     ______     ______   __  __     __  __     ______    '
    msg '/\  __ \   /\  == \   /\__  _\ /\ \_\ \   /\ \/\ \   /\  == \   '
    msg '\ \  __ \  \ \  __<   \/_/\ \/ \ \  __ \  \ \ \_\ \  \ \  __<   '
    msg ' \ \_\ \_\  \ \_\ \_\    \ \_\  \ \_\ \_\  \ \_____\  \ \_\ \_\ '
    msg '  \/_/\/_/   \/_/ /_/     \/_/   \/_/\/_/   \/_____/   \/_/ /_/ '
    msg ' ______     __         __   __   __     __    __    '
    msg '/\  __ \   /\ \       /\ \ / /  /\ \   /\  -./  \   '
    msg '\ \  __ \  \ \ \____  \ \ \ /   \ \ \  \ \ \-./\ \  '
    msg ' \ \_\ \_\  \ \_____\  \ \__|    \ \_\  \ \_\ \ \_\ '
    msg '  \/_/\/_/   \/_____/   \/_/      \/_/   \/_/  \/_/ '
    msg ''

}

tutu() {
    msg ' ______   __  __     ______   __  __    '
    msg '/\__  _\ /\ \/\ \   /\__  _\ /\ \/\ \   '
    msg '\/_/\ \/ \ \ \_\ \  \/_/\ \/ \ \ \_\ \  '
    msg '   \ \_\  \ \_____\    \ \_\  \ \_____\ '
    msg '    \/_/   \/_____/     \/_/   \/_____/ '
    msg ''
}

quod() {
    msg ''
    msg 'QUOD ERAT DEMONSTRANDUM'
    msg ''
    msg '                      □'
    msg ''
}

cqd() {
    quod
}
